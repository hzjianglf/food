<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd">

	<global-method-security pre-post-annotations="enabled" />

	<http pattern="/myfiles/**" security="none" />
	<http pattern="/attachments/**" security="none" />
	<http pattern="/verify**" security="none" />

	<http disable-url-rewriting="true" use-expressions="false"
		entry-point-ref="casEntryPoint" servlet-api-provision="true">
		<!-- 匿名授权 -->
		<access-denied-handler error-page="/WEB-INF/template/error/error_no_right.jsp" />
		<!--auto-config = true 则使用from-login. 如果不使用该属性 则默认为http-basic(没有session). -->
		<!-- lowercase-comparisons：表示URL比较前先转为小写。 -->
		<!-- path-type：表示使用Apache Ant的匹配模式。 -->
		<!--access-denied-page：访问拒绝时转向的页面。 -->
		<!-- access-decision-manager-ref：指定了自定义的访问策略管理器。 -->
		<intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<intercept-url pattern="/admin**" access="ROLE_ADMIN" />
		
		<!-- invalidate-session：指定在退出系统时是否要销毁Session。 -->
		<!-- 表单中的name是 remember_me -->
		<!-- services-ref="rememberMeServices" -->
		<http-basic />
		<anonymous username="Guest" />
		<csrf disabled="false" />
		<headers disabled="false">
			<cache-control />
			<content-type-options />
			<hsts />
			<!-- 加载 frame级别 -->
			<frame-options policy="SAMEORIGIN" />
			<xss-protection />

			<!-- 静态头部信息 -->
			<!-- <header name="Content-Security-Policy" value="default-src 'self'" 
				/> <header name="Content-Security-Report-Only" value="default-src 'self'" 
				/> -->
		</headers>
		<!-- 检测session是否可用的地址 max-sessions=1配合单用户登录最大session个数=1 -->
		<remember-me data-source-ref="dataSourceRouter"/>
		<logout delete-cookies="JSESSIONID" />
		
		<!-- session-fixation-protection 解决session伪造 -->
		<!-- error-if-maximum-exceeded 解决单一登录，不提出第一个登录 -->
		<!-- max-sessions:允许用户帐号登录的次数。范例限制用户只能登录一次。 -->
		<!-- 此值表示：用户第二次登录时，前一次的登录信息都被清空。 -->
		<!-- 需要在web.xml添加监听器 org.springframework.security.web.session.HttpSessionEventPublisher -->
		<session-management session-fixation-protection="none">
			<concurrency-control max-sessions="1" error-if-maximum-exceeded="true"/>
		</session-management>
		<!-- 设置验证filter -->
		
		<custom-filter ref="casFilter" position="CAS_FILTER" />
		<!-- 权限filter -->
		<custom-filter ref="mySniperFilter" before="FILTER_SECURITY_INTERCEPTOR" />

		<!-- 单点登陆 过滤器 -->
		<custom-filter ref="requestSingleLogoutFilter" before="LOGOUT_FILTER" />
		<!-- 单点登陆退出过滤器 -->
		<custom-filter ref="singleLogoutFilter" before="CAS_FILTER" />

	</http>

	<!-- 配置过滤器 -->
	<beans:bean id="mySniperFilter"
		class="com.sniper.springmvc.security.MyFilterSecurityInterceptor">
		<!-- 用户拥有的权限 -->
		<beans:property name="authenticationManager" ref="authenticationManager" />
		<!-- 用户是否拥有所请求资源的权限 -->
		<beans:property name="accessDecisionManager" ref="myAccessDecisionManagerBean" />
		<!-- 资源与权限对应关系 -->
		<beans:property name="securityMetadataSource" ref="securityMetadataSource" />
	</beans:bean>

	<!-- 认真管理器，实现用户认证的入口，主要实现USerDetailsService 接口即可 -->
	<!-- 读取用户的密码，角色信息，是否锁定，账号是否过期 -->
	<beans:bean id="myUserDetail"
		class="com.sniper.springmvc.security.MyUserDetailsService">
	</beans:bean>

	<!-- 访问决策其，决定那个用户具有的角色，是否足够权限访问 -->
	<beans:bean id="myAccessDecisionManagerBean"
		class="com.sniper.springmvc.security.myAccessDecisionManagerBean" />

	<!-- 资源数据定义，将所有的资源和权限对应关系建立起来，及定义木易资源可以被大写橘色访问 -->
	<beans:bean id="securityMetadataSource"
		class="com.sniper.springmvc.security.MySecurityMetadataSource">
		<beans:property name="adminRightService" ref="adminRightService" />
	</beans:bean>


	<!-- =====================单点登陆===================== -->
	<!-- cas中心认证服务入口 -->
	<!-- This filter handles a Single Logout Request from the CAS Server -->
	<beans:bean id="casEntryPoint"
		class="org.springframework.security.cas.web.CasAuthenticationEntryPoint">
		<beans:property name="loginUrl"
			value="https://java.laolang.com:8443/cas-server-webapp-4.0.0/login" />
		<beans:property name="serviceProperties" ref="serviceProperties" />
	</beans:bean>
	<beans:bean id="serviceProperties"
		class="org.springframework.security.cas.ServiceProperties">
		<beans:property name="service"
			value="https://java.laolang.com:8443/food/j_spring_cas_security_check" />
		<beans:property name="sendRenew" value="false" />
	</beans:bean>

	<!-- CAS service ticket(中心认证服务凭据)验证 -->
	<beans:bean id="casFilter"
		class="org.springframework.security.cas.web.CasAuthenticationFilter">
		<beans:property name="authenticationManager" ref="authenticationManager" />
	</beans:bean>
	
	<authentication-manager alias="authenticationManager">
		<authentication-provider ref="casAuthenticationProvider" />
	</authentication-manager>

	<beans:bean id="casAuthenticationUserDetailsService"
		class="org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper">
		<beans:property name="userDetailsService" ref="myUserDetail" />
	</beans:bean>

	<beans:bean id="casAuthenticationProvider"
		class="org.springframework.security.cas.authentication.CasAuthenticationProvider">
		<beans:property name="authenticationUserDetailsService"
			ref="casAuthenticationUserDetailsService" />
		<beans:property name="serviceProperties" ref="serviceProperties" />
		<beans:property name="ticketValidator">
			<beans:bean
				class="org.jasig.cas.client.validation.Cas20ServiceTicketValidator">
				<beans:constructor-arg index="0"
					value="https://java.laolang.com:8443/cas-server-webapp-4.0.0/" />
			</beans:bean>
		</beans:property>
		<beans:property name="key"
			value="an_id_for_this_auth_provider_only" />
	</beans:bean>

	<!-- 注销客户端 -->
	<beans:bean id="singleLogoutFilter"
		class="org.jasig.cas.client.session.SingleSignOutFilter" >
	</beans:bean>

	<!-- 注销服务器端 -->
	<beans:bean id="requestSingleLogoutFilter"
		class="org.springframework.security.web.authentication.logout.LogoutFilter">
		<beans:constructor-arg
			value="https://java.laolang.com:8443/cas-server-webapp-4.0.0/logout" />
		<beans:constructor-arg>
			<beans:bean
				class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" />
		</beans:constructor-arg>
		<beans:property name="filterProcessesUrl" value="/j_spring_cas_security_logout" />
		
	</beans:bean>

</beans:beans>